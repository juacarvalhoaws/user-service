# "org" ensures this Service is used with the correct Serverless Framework Access Key.
org: juarez
# "app" enables Serverless Framework Dashboard features and sharing them with other Services.
app: user-service
# "service" is the name of this project. This will also be added to your AWS resource names.
service: user-service


provider:
  name: aws
  runtime: nodejs20.x
  region: us-east-1
  environment:
    USERS_TABLE: users

  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
          Resource: arn:aws:logs:${self:provider.region}:*:log-group:/aws/lambda/*

        - Effect: Allow
          Action:
            - dynamodb:PutItem
            - dynamodb:GetItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:Scan            
            - dynamodb:Query


          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USERS_TABLE}/index/*

  logs:
    restApi: true            

functions:
  createUser:
    handler: handler.createUser
    events:
      - http:
          path: /users
          method: post
          request:
            schemas:
              application/json: ${file(models/createUserModel.json)}

  getAllUsers:
    handler: handler.getAllUsers
    events:
      - http:
          path: /users
          method: get              

  getUser:
    handler: handler.getUser
    events:
      - http:
          path: /users/{UserID}
          method: get

  updateUser:
    handler: handler.updateUser
    events:
      - http:
          path: /users/{UserID}
          method: put
          request:
            schemas:
              application/json: ${file(models/updateUserModel.json)}

  deleteUser:
    handler: handler.deleteUser
    events:
      - http:
          path: /users/{UserID}
          method: delete

resources:
  Resources:
    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USERS_TABLE}
        AttributeDefinitions:
          - AttributeName: UserID
            AttributeType: S
          - AttributeName: email
            AttributeType: S
          - AttributeName: name
            AttributeType: S
        KeySchema:
          - AttributeName: UserID
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: EmailIndex
            KeySchema:
              - AttributeName: email
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
          - IndexName: NameIndex
            KeySchema:
              - AttributeName: name
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 5
              WriteCapacityUnits: 5
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    ApiGatewayCloudWatchLogsRole:
      Type: AWS::IAM::Role
      Properties: 
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - Effect: "Allow"
              Principal: 
                Service: 
                  - "apigateway.amazonaws.com"
              Action: 
                - "sts:AssumeRole"
        Policies: 
          - PolicyName: "ApiGatewayCloudWatchLogsPolicy"
            PolicyDocument: 
              Version: "2012-10-17"
              Statement: 
                - Effect: "Allow"
                  Action: 
                    - "logs:CreateLogGroup"
                    - "logs:CreateLogStream"
                    - "logs:PutLogEvents"
                  Resource: "*"
        RoleName: "serverlessApiGatewayCloudWatchRole"